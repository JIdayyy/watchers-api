generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/graphql"
  binaryTargets = ["native", "darwin"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String          @id @default(uuid())
  first_name    String?
  last_name     String?
  email         String          @unique
  image         String
  emailVerified String?         @unique
  name          String
  /// @TypeGraphQL.omit(output: true)
  password      String?
  is_disabled   Boolean         @default(false)
  avatar        String?
  role          Role            @default(USER)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  nickname      String?         @unique
  follower_id   String?
  Account       Account[]
  Comment       Comment[]
  Like          Like[]
  Post          Post[]
  Preference    Preference?
  ResetPassword ResetPassword[]
  Session       Session[]
  followers        User[]          @relation("following")
  followed_users        User[]          @relation("following")
}

model Preference {
  id         String   @id @default(uuid())
  showEmail  Boolean  @default(true)
  website    String?
  location   String?
  skills     String?
  job        String?
  education  String?
  bio        String?
  color_1    String?
  color_2    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String   @unique
  User       User     @relation(fields: [userId], references: [id])
}

model Post {
  id            String    @id @default(uuid())
  slug          String    @unique
  title         String
  cover_picture String?
  content       String
  isDraft       Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  userId        String
  categoryId    String?
  Category      Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment       Comment[]
  Like          Like[]
  Tags          Tag[]
}

model Like {
  id      String  @id @default(uuid())
  post_id String?
  user_id String
  post    Post?   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Comment {
  id         String    @id @default(uuid())
  picture    String?
  content    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  userId     String
  postSlug   String
  parent_id  String?
  Post       Post      @relation(fields: [postSlug], references: [slug], onDelete: Cascade)
  author     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("reply")
  repliesRelation  Comment[] @relation("reply")
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  description String?
  Post        Post[]
}

model Category {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Post       Post[]
}

model ResetPassword {
  id         String   @id @default(uuid())
  /// @TypeGraphQL.omit(output: true, input: true)
  user_id    String
  /// @TypeGraphQL.omit(output: true, input: true)
  token      String   @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  created_at DateTime @default(now())
  /// @TypeGraphQL.omit(output: true, input: true)
  updated_at DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: true)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}
